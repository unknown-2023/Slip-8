#include<sys/stat.h>
#include<string.h>
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#include<sys/types.h>
#include<pwd.h>
#include<grp.h>
#include<dirent.h>
#include<unistd.h>
struct fileinfo
{
char fileName[20];
int size;
}files[20],temp;
int main(int argc,char *argv[])
{
struct stat s;
memset(&s,0,sizeof(s));
int i,j,n;
for(i=1;i<argc;i++)
{
printf("\n");
stat(argv[i],&s);
strcpy(files[i-1].fileName,argv[i]);
files[i-1].size = s.st_size;
}
n=i-1;
for(i=0;i<n;i++)
{
for(j=i+1;j<n;j++)
{
if(files[i].size > files[j].size)
{
temp = files[i];
files[i]=files[j];
files[j]=temp;

}
}
}
for(i=0;i<n;i++)
printf("\n%s\t%d",files[i].fileName,files[i].size);
return 0;
}

Write a C program to get and set the resource limits such as files, memory associated with a process.
#include<stdio.h>
#include<stdlib.h>
#include<sys/time.h>
#include<sys/resource.h>
int main()
{
struct rlimit limit;
if(getrlimit(RLIMIT_NPROC,&limit)<0)
printf("getrlimit error\n");
printf("No. of extant process = [%10ld][%10ld]\n",limit.rlim_max,limit.rlim_cur);
if(getrlimit(RLIMIT_CPU,&limit)<0)
printf("getrlimit error\n");
printf("limit on amount of CPU time that process can consume =
[%ld][%ld]\n",limit.rlim_max,limit.rlim_cur);
if(getrlimit(RLIMIT_DATA,&limit)<0)
printf("getrlimit error\n");
printf("max.size of process's data segment = [%ld][%ld]\n",limit.rlim_max,limit.rlim_cur);
if(getrlimit(RLIMIT_FSIZE,&limit)<0)
printf("getrlimit error\n");
printf("max. size in bytes of files that process may create =
[%ld][%ld]\n",limit.rlim_max,limit.rlim_cur);
if(getrlimit(RLIMIT_LOCKS,&limit)<0)
printf("getrlimit error\n");
printf("limit on locks = [%ld][%ld]\n",limit.rlim_max,limit.rlim_cur);
if(getrlimit(RLIMIT_MEMLOCK,&limit)<0)
printf("getrlimit error\n");
printf("max. no. of bytes of memory that can be locked in RAM =
[%ld][%ld]\n",limit.rlim_max,limit.rlim_cur);
if(getrlimit(RLIMIT_MSGQUEUE,&limit)<0)
printf("getrlimit error\n");
printf("msg queue = [%ld][%ld]\n",limit.rlim_max,limit.rlim_cur);
return 0;
}
